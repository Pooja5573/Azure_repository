{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSQL_user_db_employees_table",
						"type": "DatasetReference"
					},
					"name": "EmployeeDataset",
					"description": "Import data from DS_AzureSQL_user_db_employees_table"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureSQLDataBase_user_db_150524",
						"type": "LinkedServiceReference"
					},
					"name": "Departments"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_test_directory",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          HireDate as date,",
				"          DepartmentID as integer,",
				"          Salary as decimal(10,2),",
				"          MANAGERID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EmployeeDataset",
				"source(output(",
				"          DepartmentID as integer,",
				"          DepartmentName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Departments',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> Departments",
				"EmployeeDataset, Departments join(EmployeeID == Departments@DepartmentID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          EmployeeID,",
				"          FirstName,",
				"          LastName,",
				"          Salary,",
				"          DepartmentID = Departments@DepartmentID,",
				"          DepartmentName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(DepartmentName),",
				"     Salary = sum(Salary)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          name as string,",
				"          dob as string,",
				"          email as string,",
				"          gender as string,",
				"          country as string,",
				"          region as string,",
				"          city as string,",
				"          asset as string,",
				"          marital_status as string",
				"     ),",
				"     partitionFileNames:['aggregate_Output'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}